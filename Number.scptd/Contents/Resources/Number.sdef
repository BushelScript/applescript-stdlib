<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">
<dictionary>


	
	<suite name="General Operations" code="****">


		
		<command name="parse number" code="Mth:PNum" description="parse text as a number">
			<direct-parameter type="text"/>
			<parameter name="using" code="Usin" type="FNSt" optional="yes" description="(default: plain style)"/>
			<parameter name="for locale" code="Loca" optional="yes" description="a locale identifier, e.g. “en_US” (default: missing value, i.e. no locale)">
				<type type="text"/>
				<type type="missing value"/>
			</parameter>
			<result type="number"/>
			<documentation>
				<html><![CDATA[
				
<p>By default, the <code>parse number</code> command converts numeric text in canonical format to an integer/real number. Unlike coercing a text value to <code>number</code>, which parses the text according to the current user’s localization settings, this always uses the same numerical syntax as AppleScript itself. For example:</p>

<pre><code>"3.14" as number → 3.14 (USA)
"3,14" as number → 3.14 (Germany)

convert text to number "3.14" → 3.14 (USA)
convert text to number "3.14" → 3.14 (Germany)</code></pre>

				]]></html>
			</documentation>
		</command>
		
		<command name="format number" code="Mth:FNum" description="format a number as text">
			<direct-parameter type="number"/>
			<parameter name="using" code="Usin" type="FNSt" optional="yes" description="(default: plain style)"/>
			<parameter name="for locale" code="Loca" optional="yes" description="a locale identifier, e.g. “en_US” (default: missing value, i.e. no locale)">
				<type type="text"/>
				<type type="missing value"/>
			</parameter>
			<result type="text"/>
			<documentation>
				<html><![CDATA[
				
<p>By default, the <code>format number</code> command converts an integer/real number to numeric text in canonical format. Unlike coercing an integer or real value to <code>text</code>, which formats the text according to the current user’s localization settings, this always uses the same numerical syntax as AppleScript itself. For example:</p>

<pre><code>3.14 as text → "3.14" (USA)
3.14 as text → "3,14" (Germany)

format number 3.14 → "3.14" (USA)
format number 3.14 → "3.14" (Germany)</code></pre>

				]]></html>
			</documentation>
		</command>
		
		<enumeration name="FNSt" code="FNSt">
			<enumerator name="plain format" code="FNS0"/>
			<enumerator name="decimal format" code="FNS1"/>
			<enumerator name="currency format" code="FNS2"/>
			<enumerator name="percent format" code="FNS3"/>
			<enumerator name="scientific format" code="FNS4"/>
			<enumerator name="word format" code="FNS5"/>
		</enumeration>
		
		
				
		<command name="format hexadecimal number" code="Mth:NuHe" description="convert an integer to hexadecimal text">
			<direct-parameter type="integer"/>
			<parameter name="padding to" code="Plac" type="integer" optional="yes" description="minimum number of digits to which to pad the resulting hex number, not including sign or prefix (default: 0)"/>
			<parameter name="prefix" code="Pref" type="boolean" optional="yes" description="include “0x” prefix in result? (default: true)"/>
			<result type="text"/>
		</command>
		
		<command name="parse hexadecimal number" code="Mth:HeNu" description="convert hexadecimal text to an integer/real number">
			<direct-parameter type="text"/>
			<parameter name="perfect precision" code="Prec" type="boolean" optional="yes" description="if true, report an error if the hexadecimal number is too large to be converted to an AppleScript number without losing precision; if false, allow conversion to any real number even if some precision will be lost (default: true)"/>
			<result type="number"/>
		</command>
		
		
		
		
		<command name="convert to radians" code="Mth:DeRa" description="convert an angle from degrees to radians">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="convert to degrees" code="Mth:RaDe" description="convert an angle from radians to degrees">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		
		<command name="abs" code="Mth:Abs_" description="get absolute (non-negative) value of a number">
			<direct-parameter type="number"/>
			<result type="number"/>
			<documentation>
				<html><![CDATA[
				
<p>Examples:</p>
<pre><code>abs 3.1 → 3.1

abs -3.1 → 3.1</code></pre>

				]]></html>
			</documentation>
		</command>
		
		<command name="cmp" code="Mth:CmpN" description="compare two numbers">
			<direct-parameter description="a list of two numbers">
				<type type="real" list="yes"/>
			</direct-parameter>
			<result type="integer" description="returns -1 if first number is lower, 0 if both numbers are about equal, or +1 if first number is higher"/>
			<documentation>
				<html><![CDATA[
				
<p>Unlike AppleScript's ‘<code>=</code>’ operator, which compares two numbers for <em>exact</em> equality, the <code>cmp</code> command allows a small margin of error (±1.0e-9), so ignores any slight differences due to the limited precision of real (a.k.a. floating point) numbers. For example:</p>

<pre><code>(0.7 * 0.7) = 0.49 → false (probably not what you wanted!)

cmp {(0.7 * 0.7), 0.49} → 0 (i.e. the numbers are "equal")</code></pre>

				]]></html>
			</documentation>
		</command>
		
		<command name="max" code="Mth:MaxN" description="find the highest number in a list of numbers">
			<direct-parameter>
				<type type="number" list="yes"/>
			</direct-parameter>
			<result type="number"/>
		</command>
		
		<command name="min" code="Mth:MinN" description="find the lowest number in a list of numbers">
			<direct-parameter>
				<type type="number" list="yes"/>
			</direct-parameter>
			<result type="number"/>
		</command>
		
		
		<command name="round number" code="Mth:RouN" description="round a number to the specified number of places">
			<direct-parameter type="real"/>
			<parameter name="to places" code="Plac" type="integer" optional="yes" description="The maximum number of decimal places that can appear in the result (default: 0). If 0, the result is an integer; if greater than 0, the number's least significant digits are also rounded."/>
			<parameter name="by" code="Dire" type="MRnd" optional="yes" description="the rounding direction (default: ‘rounding halves to even’)"/>
			<result>
				<type type="real"/>
				<type type="integer"/>
			</result>
			<!-- TO DO: need documentation to fully explain each rounding behavior -->
		</command>
		
		
		<!-- same as in StandardAdditions.sdef -->
		<enumeration name="MRnd" code="MRnd">
			<enumerator name="rounding up" code="RN_U"/>
			<enumerator name="rounding down" code="RN_D"/>
			<enumerator name="rounding toward zero" code="RN_T"/>
			<enumerator name="rounding away from zero" code="RN_F"/>
			<enumerator name="rounding halves toward zero" code="RNhT"/>
			<enumerator name="rounding halves away from zero" code="RNhF"/>
			<enumerator name="rounding halves to even" code="RNhE"/>
		</enumeration>
		
	</suite>
	
	
	
	<suite name="Logarithms" code="****">
		
		<command name="logn" code="Mth:Logn" description="natural logarithm (inverse of ‘e ^ n’)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="log10" code="Mth:Lo10" description="base-10 logarithm (inverse of ‘10 ^ n’)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="logb" code="Mth:Logb" description="logarithm using the specified base (inverse of ‘base ^ n’)">
			<direct-parameter type="real"/>
			<parameter name="base" code="Base" type="real"/>
			<result type="real"/>
		</command>
		
	</suite>	
	
	
	
	<suite name="Trigonometry" code="****" description="(all angles are degrees)">
		
		<command name="sin" code="Mth:Sin_" description="sine">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="cos" code="Mth:Cos_" description="cosine">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="tan" code="Mth:Tan_" description="tangent">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		
		<command name="asin" code="Mth:Sina" description="arc sine (inverse of sine)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="acos" code="Mth:Cosa" description="arc cosine (inverse of cosine)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="atan" code="Mth:Tana" description="arc tangent (inverse of tangent)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		
		<command name="asinh" code="Mth:Sinh" description="hyperbolic sine">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="acosh" code="Mth:Cosh" description="hyperbolic cosine">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="atanh" code="Mth:Tanh" description="hyperbolic tangent">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
	</suite>
	
	
	
</dictionary>