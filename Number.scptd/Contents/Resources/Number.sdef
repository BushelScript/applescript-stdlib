<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">
<dictionary>


	
	<suite name="Number Conversion" code="****">
		
		<command name="format number" code="Mth:FNum" description="format a number as text">
			<direct-parameter type="number"/>
			<parameter name="using" code="Usin" optional="yes" description="(default: canonical number format)">
				<type type="number format enumeration"/>
				<type type="number format record"/>
				<type type="text"/>
			</parameter>
			<parameter name="for locale" code="Loca" type="text" optional="yes" description="a locale identifier, e.g. “en_US”, or “current” or “none” (default: “none”)"/>
			<result type="text"/>

			<documentation>
				<html><![CDATA[
<p>By default, the <code>format number</code> command converts an integer/real number to numeric text in canonical format. Unlike coercing an integer or real value to <code>text</code>, which formats the text according to the current user’s localization settings, <code>format number</code> <em>always</em> uses the same numerical syntax as the AppleScript language, unless additional formatting and/or locale settings are explicitly given.</p>

<p>For example, on a US-localized system, coercing <code>3.14</code> to text produces <code>"3.14"</code>:</p>

<pre><code>3.14 as text → "3.14" (localized conversion)

format number 3.14 → "3.14" (canonical conversion)</code></pre>

<p>On a German system, however, the same number-to-text coercion uses a comma instead of a period as the decimal separator:</p>

<pre><code>3.14 as text → <strong>"3,14"</strong> (localized conversion)

format number 3.14 → "3.14" (canonical conversion)</code></pre>

<p>Using the <code>format number</code> command instead of coercing the number to text ensures a consistent result, no matter where the script is run.</p>

<p>For information on formatting numbers using custom formats, see the <a href="#customizing-number-formats">Customizing Number Formats</a> section below.</p>
				]]></html>
			</documentation>
		</command>
		
		
		<command name="parse number" code="Mth:PNum" description="parse text as a number">
			<direct-parameter type="text"/>
			<parameter name="using" code="Usin" optional="yes" description="(default: canonical number format)">
				<type type="number format enumeration"/>
				<type type="number format record"/>
				<type type="text"/>
			</parameter>
			<parameter name="for locale" code="Loca" type="text" optional="yes" description="a locale identifier, e.g. “en_US”, or “current” or “none” (default: “none”)"/>
			<result type="number"/>

			<documentation>
				<html><![CDATA[
<p>By default, the <code>parse number</code> command converts numeric text in canonical format to an integer/real number. Unlike coercing a text value to <code>number</code>, which parses the text according to the current user’s localization settings, <code>format number</code> <em>always</em> uses the same numerical syntax as the AppleScript language, unless additional formatting and/or locale settings are explicitly given.</p>

<p>For example, on a US-localized system, coercing <code>"3.14"</code> to a number produces <code>3.14</code>:</p>

<pre><code>"3.14" as number → 3.14 (localized conversion)

parse number "3.14" → 3.14 (canonical conversion)</code></pre>

<p>On a German system, however, the same text-to-number coercion requires the decimal separator to be a comma, not a period:</p>

<pre><code>"3.14" as number → Error: Can’t make "3.14" into type number.

<strong>"3,14"</strong> as number → 3.14 (localized conversion)

parse number "3.14" → 3.14 (canonical conversion)</code></pre>

<p>Using the <code>parse number</code> command instead of coercing the number to text ensures a consistent result, no matter where the script is run.</p>

<p>For information on parsing numbers using custom formats, see the <a href="#customizing-number-formats">Customizing Number Formats</a> section below.</p>
				]]></html>
			</documentation>
		</command>
		
		
		<record-type name="number format record" code="MthR">
			<property name="based on format" code="MthA">
				<type type="number format enumeration"/>
				<type type="text"/>
			</property>
			<property name="minimum decimal places" code="MthB" type="integer"/>
			<property name="maximum decimal places" code="MthC" type="integer"/>
			<property name="minimum significant digits" code="MthD" type="integer"/>
			<property name="maximum significant digits" code="MthE" type="integer"/>
			<property name="decimal separator" code="MthF" type="text"/>
			<property name="grouping separator" code="MthG" type="text"/>
			<property name="rounding behavior" code="MthH" type="MRnd"/>
		</record-type>
		
		
		<enumeration name="number format enumeration" code="MthZ">
			<enumerator name="canonical number format" code="Mth0"/> <!-- equivalent to AppleScript's own number formatting behavior -->
			<enumerator name="integer format" code="Mth1"/>
			<enumerator name="decimal format" code="Mth2"/>
			<enumerator name="scientific format" code="Mth3"/>
			<enumerator name="percent format" code="Mth4"/>
			<enumerator name="currency format" code="Mth5"/>
			<enumerator name="word format" code="Mth6"/>
		</enumeration>
		
				
		<command name="format hex" code="Mth:NuHe" description="convert an integer, or list of integers, to hexadecimal text">
			<direct-parameter>
				<type type="integer"/>
				<type type="integer" list="yes"/>
			</direct-parameter>
			<parameter name="width" code="Plac" type="integer" optional="yes" description="if greater than 0, the width of the resulting hexadecimal text, or each chunk if a list of numbers is given, not including sign or prefix (default: 0)"/>
			<parameter name="prefix" code="Pref" type="boolean" optional="yes" description="include “0x” prefix in result? (default: false)"/>
			<result type="text"/>
			
			<documentation>
				<html><![CDATA[
<p>For example:</p>

<pre><code>format hex 526 width 4 with prefix → "0x020E"

format hex {1, 11, 6, 13, 0, 8} width 2 → "010B060D0008"</code></pre>

<p>If the ‘width’ parameter is given, the hexadecimal value will be padded to that number of digits (not including sign or prefix) unless the number is too large to represent within that number of hexadecimal digits, in which case an error is raised instead:</p>

<pre><code>format hex 526 width 2 with prefix
→ error: Number is too large to represent as 2-digit hexadecimal text 
   (not between -256 and 255).</code></pre>
				]]></html>
			</documentation>
		</command>
		
		<command name="parse hex" code="Mth:HeNu" description="convert hexadecimal text to an integer, or list of integers">
			<direct-parameter type="text"/>
			<parameter name="width" code="Plac" type="integer" optional="yes" description="if greater than 0, the hexadecimal text is split into chunks of the specified width and converted to a list of numbers (default: 0)"/>
			<parameter name="precision loss" code="Prec" type="boolean" optional="yes" description="if false, report an error if the hexadecimal number is too large to be converted to an AppleScript number without losing precision; if true, allow conversion to any real number even if some precision will be lost (default: false)"/>
			<result>
				<type type="integer"/>
				<type type="integer" list="yes"/>
			</result>
			
			<documentation>
				<html><![CDATA[
<p>For example:</p>

<pre><code>parse hex "-0x020E" → -526

parse hex "010B060D0008" width 2 → {1, 11, 6, 13, 0, 8}</code></pre>

<p>The <code>parse text</code> will return a non-fractional real number if a hexadecimal value is too large to represent using AppleScript’s native 30-bit integer type, normally raising an error if it can’t be accurately represented as a real number either (although this may be overridden if some loss of precision is acceptable):</p>

<pre><code>parse hex "0xFFFF" -- 2^16-1
→ 65535

parse hex "0xFFFFFFFF" -- 2^32-1 
→- 4.294967295E+9

parse hex "0xFFFFFFFFFFFFFFFF" -- 2^64-1 
→ error: Hexadecimal text is too large to convert to number without losing precision.

parse hex "0xFFFFFFFFFFFFFFFF" with precision loss 
→ 1.84467440737096E+19 (approximate only)</code></pre>


				]]></html>
			</documentation>
		</command>
	
	</suite>
	
	
	
	<suite name="General Operations" code="****">
		
		<command name="deg2rad" code="Mth:DeRa" description="convert an angle from degrees to radians">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="rad2deg" code="Mth:RaDe" description="convert an angle from radians to degrees">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		
		<command name="abs" code="Mth:Abs_" description="get absolute (non-negative) value of a number">
			<direct-parameter type="number"/>
			<result type="number"/>
			<documentation>
				<html><![CDATA[
				
<p>Examples:</p>
<pre><code>abs 3.1 → 3.1

abs -3.1 → 3.1</code></pre>

				]]></html>
			</documentation>
		</command>
		
		<command name="cmp" code="Mth:CmpN" description="compare two numbers">
			<direct-parameter description="a list of two numbers">
				<type type="real" list="yes"/>
			</direct-parameter>
			<result type="integer" description="returns -1 if first number is lower, 0 if both numbers are about equal, or +1 if first number is higher"/>
			<documentation>
				<html><![CDATA[
				
<p>Unlike AppleScript's ‘<code>=</code>’ operator, which compares two numbers for <em>exact</em> equality, the <code>cmp</code> command allows a small margin of error (±1.0e-9), so ignores any slight differences due to the limited precision of real (a.k.a. floating point) numbers. For example:</p>

<pre><code>(0.7 * 0.7) = 0.49 → false (probably not what you wanted!)

cmp {(0.7 * 0.7), 0.49} → 0 (i.e. the numbers are "equal")</code></pre>

				]]></html>
			</documentation>
		</command>
		
		<command name="max" code="Mth:MaxN" description="find the highest number in a list of numbers">
			<direct-parameter>
				<type type="number" list="yes"/>
			</direct-parameter>
			<result type="number"/>
		</command>
		
		<command name="min" code="Mth:MinN" description="find the lowest number in a list of numbers">
			<direct-parameter>
				<type type="number" list="yes"/>
			</direct-parameter>
			<result type="number"/>
		</command>
		
		
		<command name="round number" code="Mth:RouN" description="round a number to the specified number of places">
			<direct-parameter type="number"/>
			<parameter name="to places" code="Plac" type="integer" optional="yes" description="The maximum number of decimal places that can appear in the result (default: 0). If 0, the result is an integer; if greater than 0, the number's least significant digits are also rounded."/>
			<parameter name="by" code="Dire" type="MRnd" optional="yes" description="the rounding direction (default: rounding halves to even)"/>
			<result type="number"/>
		</command>
		
		
		<enumeration name="MRnd" code="MRnd">
			<enumerator name="rounding up" code="RN_U"/>
			<enumerator name="rounding down" code="RN_D"/>
			<enumerator name="rounding toward zero" code="RN_T"/>
			<enumerator name="rounding away from zero" code="RN_F"/>
			<enumerator name="rounding halves toward zero" code="RNhT"/>
			<enumerator name="rounding halves away from zero" code="RNhF"/>
			<enumerator name="rounding halves to even" code="RNhE"/>
		</enumeration>
		
	</suite>
	
	
	
	<suite name="Logarithms" code="****">
		
		<command name="logn" code="Mth:Logn" description="natural logarithm (inverse of ‘e ^ n’)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="log10" code="Mth:Lo10" description="base-10 logarithm (inverse of ‘10 ^ n’)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="logb" code="Mth:Logb" description="logarithm using the specified base (inverse of ‘base ^ n’)">
			<direct-parameter type="real"/>
			<parameter name="base" code="Base" type="real"/>
			<result type="real"/>
		</command>
		
	</suite>	
	
	
	
	<suite name="Trigonometry" code="****" description="(all angles are degrees)">
		
		<command name="sin" code="Mth:Sin_" description="sine">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="cos" code="Mth:Cos_" description="cosine">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="tan" code="Mth:Tan_" description="tangent">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		
		<command name="asin" code="Mth:Sina" description="arc sine (inverse of sine)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="acos" code="Mth:Cosa" description="arc cosine (inverse of cosine)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="atan" code="Mth:Tana" description="arc tangent (inverse of tangent)">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		
		<command name="asinh" code="Mth:Sinh" description="hyperbolic sine">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="acosh" code="Mth:Cosh" description="hyperbolic cosine">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
		<command name="atanh" code="Mth:Tanh" description="hyperbolic tangent">
			<direct-parameter type="real"/>
			<result type="real"/>
		</command>
		
	</suite>
	
	
	<suite name="Customizing Number Formats" code="****">
		
		<documentation>
			<html><![CDATA[
	<p><a id="customizing-number-formats"></a>In addition to parsing and formatting numeric text in canonical AppleScript-style format, the <code>parse number</code> and <code>format number</code> commands allow custom formats to be specified via their optional <code>using</code> parameters. These parameters accept either a text value containing special character-based number format patterns, a predefined constant representing a commonly used format, or a <code>number format record</code> containing a predefined format constant plus additional customizations.</p>
	
<p>For a complete list of supported patterns, see <a href="http://www.unicode.org/reports/tr35/tr35-31/tr35-numbers.html#Number_Format_Patterns">Part 3: Numbers</a> of Unicode Technical Standard #35. Commonly used patterns are listed below for convenience.</p>


		[TO DO: include summary of template text syntax plus examples]
				]]></html>
		</documentation>
	
	</suite>

</dictionary>