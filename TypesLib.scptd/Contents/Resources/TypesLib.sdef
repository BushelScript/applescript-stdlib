<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">
<dictionary title="">

	
	<suite name="General Commands" code="****">

		<command name="native type" code="Typ:NaTy" description="get an AppleScript object's true type">
			<parameter name="for" code="Valu" type="any"/>
			<result type="type" description="the name of the object's type"/>
			<documentation>
				<html><![CDATA[
<p>If the given object is a reference to another object (or objects), returns <code>specifier</code> (a.k.a. <code>reference</code>). If the given object is a record or script object, returns <code>record</code> or <code>script</code> respectively, ignoring its custom <code>class</code> property if it has one. Otherwise, returns the value of the object's <code>class</code> property.</p> 

<!-- note that getting an application object's 'class' property may also give the wrong result, depending on whether or not the app's dictionary defines a 'class' property for it, but to keep this documentation simple it isn't mentioned here -->

<pre><code>native type for {class:document, name:"Untitled"} → record
native type for (document 1 of application "TextEdit") → specifier</code></pre>
				]]></html>
			</documentation>
		</command>

		<command name="check type" code="Typ:ChkT" description="check if an object is one of the specified AppleScript types">
			<parameter name="for" code="Valu" type="any"/>
			<parameter name="is" code="Type">
				<type type="type class" list="yes"/>
			</parameter>
			<result type="boolean"/>
			<documentation>
				<html><![CDATA[
<p>This is a more reliable alternative to <code>theValue's class is TYPE</code>, which returns the wrong result for some types of objects (e.g. record, script, specifier, application). For example:</p>

<pre><code>check type for {class:list} is list → false (it's a record)
check type for (document 1 of application "TextEdit") is list  → false (it's a specifier)

check type for {class:document, name:"ReadMe.txt"} is record → true
check type for (document 1  of application "TextEdit") is specifier → true
check type for 3.14 is {number, text, date} → true</code></pre>

<p>(Tip: To check for an AppleScript-ObjC specifier in particular, use <code>«class ocid»</code>.)</p>
				]]></html>
			</documentation>
		</command>


		<command name="convert to Cocoa" code="Typ:OCID" description="convert an AppleScript value to its Cocoa equivalent">
			<parameter name="from" code="From" type="any"/>
			<result type="specifier" description="an AppleScript-ObjC object specifier, ‘«class ocid» id «data optr...»’"/>
		</command>


	</suite>
	
	
	
	<suite name="Collection Objects" code="****">
			
		<command name="dictionary collection" code="Typ:DicO" description="returns a new DictionaryCollection">
			<result type="script"/>
			<documentation>
				<html><![CDATA[
<p><code>DictionaryCollection</code> script objects define the following handlers:</p>

<dl>
<dt><code>countItems()</code></dt>
<dd><p>Count the number of key-value pairs in the collection</p>
<ul>
	<li>Result: <tt>integer</tt></i>
</ul>
</dd>

<dt><code>containsItem(<var>theKey</var>)</code></dt>
<dd><p>Does the collection contain a key-value pair with the specified key?</p>
<ul>
	<li><var>theKey</var> : <tt>text</tt></li>
	<li>Result: <tt>boolean</tt></li>
</ul>
</dd>

<dt><code>addItem(<var>theKey</var>, <var>theValue</var>)</code></dt>
<dd><p>Add a key-value pair to the collection</p>
<ul>
	<li><var>theKey</var> : <tt>text</tt></li>
	<li><var>theValue</var> : <tt>anything</tt></li>
</ul>
</dd>

<dt><code>removeItem(<var>theKey</var>)</code></dt>
<dd><p>Remove a key-value pair from the collection</p>
<ul>
	<li><var>theKey</var> : <tt>text</tt></li>
	<li>Result: <tt>anything</tt> – the removed value</li>
</ul>
</dd>

<dt><code>getItem(<var>theKey</var>)</code></dt>
<dd><p>Get the value for the given key from the collection</p>
<ul>
	<li><var>theKey</var> : <tt>text</tt></li>
	<li>Result: <tt>anything</tt> – the removed value</li>
</ul>
</dd>

<dt><code>deleteAllItems()</code>
<dd><p>Delete all key-value pairs from the collection</p></dd>

<p>Unlike AppleScript records, which are fixed collections of properties whose names are keywords and/or identifiers defined in the code, dictionary objects are collections of arbitrary key-value pairs. Dictionary keys are typically text values, though other value types (numbers, dates, type and constant symbols) can also be used as long as they can also be coerced to text. Numeric keys are compared for numeric equality (e.g. <code>1</code> and <code>1.0</code> are the same). Other types of keys, including text-based keys, are compared exactly (e.g. <code>"foo"</code> and <code>"Foo"</code> are different).</p>

<p>Examples:</p>

<pre><code>set d to dictionary collection

d's addItem("red", {255, 0, 0})
d's addItem("yellow", {255, 255, 0})
d's addItem("green", {0, 255, 0})
d's addItem("blue", {0, 0, 255})

log d's countItems() --> 4

log d's getItem("green") --> {0, 255, 0}</code></pre>
				]]></html>
			</documentation>
		</command>
		
		<command name="unique collection" code="Typ:SetO" description="returns a new UniqueCollection (a.k.a. Counted Set)">
			<result type="script"/>
			<documentation>
				<html><![CDATA[
<p><code>UniqueCollection</code> script objects define the following handlers:</p>

<dl>
<dt><code>countItems()</code></dt>
<dd><p>Count the number of items in the collection</p>
<ul>
	<li>Result: <tt>integer</tt></i>
</ul>
</dd>

<dt><code>containsItem(<var>theValue</var>)</code></dt>
<dd><p>Does the collection contain the specified item?</p>
<ul>
	<li><var>theValue</var> : <tt>text</tt></li>
	<li>Result: <tt>boolean</tt></li>
</ul>
</dd>

<dt><code>addItem(<var>theValue</var>)</code></dt>
<dd><p>Add an item to the collection</p>
<ul>
	<li><var>theValue</var> : <tt>text</tt></li>
</ul>
</dd>

<dt><code>removeItem(<var>theValue</var>)</code></dt>
<dd><p>Remove an item from the collection</p>
<ul>
	<li><var>theValue</var> : <tt>text</tt></li>
	<li>Result: <tt>integer</tt> – the number of times the item was previously added</li>
</ul>
</dd>

<dt><code>getItemCount(<var>theValue</var>)</code></dt>
<dd><p>Count the number of times the item was previously added</p>
<ul>
	<li><var>theValue</var> : <tt>text</tt></li>
	<li>Result: <tt>integer</tt></li>
</ul>
</dd>

<dt><code>deleteAllItems()</code>
<dd><p>Delete all items from the collection</p></dd>
				]]></html>
			</documentation>
		</command>
		
		<command name="queue collection" code="Typ:QueO" description="returns a new QueueCollection (a.k.a. First-In-First-Out sequence)">
			<result type="script"/>
			<documentation>
				<html><![CDATA[
<p><code>QueueCollection</code> script objects define the following handlers:</p>

<dl>
<dt><code>countItems()</code></dt>
<dd><p>Count the number of items in the collection</p>
<ul>
	<li>Result: <tt>integer</tt></i>
</ul>
</dd>

<dt><code>addItem(<var>theValue</var>)</code></dt>
<dd><p>Add an item to the end of the queue</p>
<ul>
	<li><var>theValue</var> : <tt>anything</tt></li>
</ul>
</dd>

<dt><code>removeItem()</code></dt>
<dd><p>Remove an item from the head of the queue</p>
<ul>
	<li>Result: <tt>anything</tt></li>
</ul>
</dd>

<dt><code>getItem()</code></dt>
<dd><p>Return the item at the head of the queue without removing it</p>
<ul>
	<li>Result: <tt>anything</tt></li>
</ul>
</dd>

<dt><code>deleteAllItems()</code>
<dd><p>Delete all items from the collection</p></dd>
				]]></html>
			</documentation>
		</command>
		
		<command name="stack collection" code="Typ:StaO" description="returns a new StackCollection (a.k.a. Last-In-First-Out sequence)">
			<result type="script"/>
			<documentation>
				<html><![CDATA[
<p><code>StackCollection</code> script objects define the following handlers:</p>

<dl>
<dt><code>countItems()</code></dt>
<dd><p>Count the number of items in the collection</p>
<ul>
	<li>Result: <tt>integer</tt></i>
</ul>
</dd>

<dt><code>addItem(<var>theValue</var>)</code></dt>
<dd><p>Add an item to the top of the stack</p>
<ul>
	<li><var>theValue</var> : <tt>anything</tt></li>
</ul>
</dd>

<dt><code>removeItem()</code></dt>
<dd><p>Remove an item from the top of the stack</p>
<ul>
	<li>Result: <tt>anything</tt></li>
</ul>
</dd>

<dt><code>getItem()</code></dt>
<dd><p>Return the item at the top of the stack without removing it</p>
<ul>
	<li>Result: <tt>anything</tt></li>
</ul>
</dd>

<dt><code>deleteAllItems()</code>
<dd><p>Delete all items from the collection</p></dd>
				]]></html>
			</documentation>
		</command>
		
	</suite>
	
	
</dictionary>