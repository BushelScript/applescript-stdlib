<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">
<dictionary>
    
    <suite name="Modify" code="****">
        
        <command name="insert into list" code="Lst:Inst" description="insert an item (or items) into the given list, returning a new list">
            <direct-parameter type="list"/>
            <parameter name="value" code="Valu" type="anything"/>
            <parameter name="before item" code="Befo" type="integer" optional="yes"/>
            <parameter name="after item" code="Afte" type="integer" optional="yes" description="(default: -1)"/>
            <parameter name="concatenation" code="Conc" type="boolean" optional="yes" description="if true and the ‘value’ parameter is a list, concatenate it instead of inserting it"/>
            <result type="list"/>
            <documentation>
                <html><![CDATA[
<pre><code>insert into list {1, 2, 3} value 4 → {1, 2, 3, 4}

insert into list {1, 2, 3} value 8 before item 2 → {1, 8, 2, 3}

insert into list {1, 2, 3} value {7, 8, 9} after item 2 → {1, 2, {7, 8, 9}, 3}

insert into list {1, 2, 3} value {7, 8, 9} after item 2 with concatenation → {1, 2, 7, 8, 9, 3}</code></pre>
                ]]></html>
            </documentation>
        </command>
        
        
        <command name="delete from list" code="Lst:Dele" description="delete an item (or items) from the given list, returning a new list">
            <direct-parameter type="list"/>
            <parameter name="item" code="Indx" type="integer" optional="yes" description="(default: -1)"/>
            <parameter name="from item" code="FIdx" type="integer" optional="yes"/>
            <parameter name="to item" code="TIdx" type="integer" optional="yes"/>
            <result type="list"/>
            <documentation>
                <html><![CDATA[
<pre><code>delete from list {1, 2, 3, 4, 5} → {1, 2, 3, 4}

delete from list {1, 2, 3, 4, 5} item 2 → {1, 3, 4, 5}

delete from list {1, 2, 3, 4, 5} from item 2 to item 4 → {1, 5}

delete from list {1, 2, 3, 4, 5} to item 3 → {4, 5}</code></pre>

<p>Returns a copy of the full list if the start index is greater than the end index. Throws error -1728 if an index is out of range.</p>
                ]]></html>
            </documentation>
        </command>
		
        
        <command name="map list" code="Lst:Map_" description="convert each item in the given list, returning a new list containing the converted values">
            <direct-parameter type="list"/>
            <parameter name="using" code="Usin" type="script"/>
            <result type="list"/>
            <documentation>
                <html><![CDATA[
<p>The <code>using</code> parameter's script object must implement a handler named <code>mapItem</code> that takes a value as its input and returns a new value as its output.</p>

<pre><code>script DoubleNumber
  to mapItem(aValue)
    return aValue * 2
  end mapItem
end script

map list {1, 2, 3} using DoubleNumber → {2, 4, 6}</code></pre>
                ]]></html>
            </documentation>
        </command>
        
        
        <command name="reduce list" code="Lst:Redu" description="convert each item in the given list, returning a new list containing the converted values">
            <direct-parameter type="list"/>
            <parameter name="using" code="Usin" type="script"/>
            <result type="list"/>
            <documentation>
                <html><![CDATA[
<p>The <code>using</code> parameter's script object must implement a handler named <code>reduceItem</code> that takes two values as its input and returns a new value as its output.</p>

<pre><code>script SumNumbers
  to reduceItem(partialResult, aValue)
    return partialResult + aValue
  end reduceItem
end script

reduce list {5, 1, 9, 3} using SumNumbers → 18</code></pre>
                ]]></html>
            </documentation>
        </command>
        
		
		<command name="remove duplicates from list" code="Lst:RDuL" description="remove duplicate items from the list, returning a new list">
			<direct-parameter type="list"/>
			<result type="list"/>
			<documentation>
				<html><![CDATA[
<p>This uses AppleScript’s <code>is in</code> operator to determine if each item has already appeared in the list. When processing lists of text, wrap the <code>remove duplicates from list</code> command in <code>considering</code>/<code>ignoring</code> blocks as necessary.</p>
				]]></html>
			</documentation>
		</command>
        
		
		<command name="slice list" code="Lst:SliL" description="get the list items between the specified start and/or end indexes">
			<direct-parameter type="list"/>
			<parameter name="from item" code="FIdx" type="integer" optional="yes"/>
			<parameter name="to item" code="TIdx" type="integer" optional="yes"/>
			<result type="text"/>
			<documentation>
				<html><![CDATA[
<p><code>slice list theList from i to j</code> is similar to <code>get items i thru j of theList</code>, except that it returns an empty list if the start index is greater than the end index, and doesn’t throw an error if an index is out of range.</p>
				]]></html>
			</documentation>
		</command>
        
        
        <command name="transpose list" code="Lst:Tran" description="rearrange a list of lists, returning a new list as result">
            <direct-parameter>
                <type type="list" list="yes"/>
            </direct-parameter>
            <parameter name="while" code="Whil" type="LTrh" optional="yes" description="if lists are uneven lengths, pad the shorter lists, trim the longer lists, or treat as error? (default: treat as error)"/>
            <parameter name="padding with" code="PadI" type="anything" optional="yes" description="when ‘padding uneven lists’, the pad value to use (default: missing value)"/>
            <result>
                <type type="list" list="yes"/>
            </result>
            <documentation>
                <html><![CDATA[
<pre><code>transpose list {{1, 2, 3}, {4, 5, 6}} → {{1, 4}, {2, 5}, {3, 6}}</code></pre>

<p>To obtain a list of {name, album, artist} sublists for each track in iTunes:</p>

<pre><code>tell application "iTunes"
  set trackInfo to {name, album, artist} of every track
end tell
transpose list trackInfo</code></pre>
                ]]></html>
            </documentation>
        </command>
        
        
        <enumeration name="LTrh" code="LTrh">
            <enumerator name="padding uneven lists" code="LTrP"/>
            <enumerator name="trimming uneven lists" code="LTrT"/>
            <enumerator name="rejecting uneven lists" code="LTrR"/>
        </enumeration>
        
    </suite>
    
    
    
    <suite name="Search" code="****">
        
        <command name="find in list" code="Lst:Find" description="return the index(es) of the specified value in a list">
            <direct-parameter type="list"/>
            <parameter name="value" code="Valu" type="anything" optional="yes" description="the value to find (default: missing value)"/>
            <parameter name="using" code="Usin" type="script" optional="yes" definition="the test to perform on each item; if given, the ‘value’ parameter is ignored"/>
            <parameter name="returning" code="Retu" type="LFWh" optional="yes" description=""/>
            <result>
                <type type="integer" list="yes" description="a list of item index(es), or an empty list if no matches are found"/>
            </result>
            <documentation>
                <html><![CDATA[
<pre><code>find in list {"a", "b", "c"} value "b" → {2}</code></pre>

<p>The <code>value</code> parameter uses AppleScript’s <code>is</code> operator to determine if a list item matches the specified value. e.g. When processing lists of text, wrap the <code>find in list</code> command in <code>considering</code>/<code>ignoring</code> blocks as necessary.</p>

<p>For more complex tests, use the <code>using</code> parameter instead. This takes a script object containing a <code>filterItem</code> handler that takes the item to check as its sole parameter and returns <code>true</code> or <code>false</code> to indicate a match or non-match.</p>
                ]]></html>
            </documentation>
        </command>
        
        <enumeration name="LFWh" code="LFWh">
            <enumerator name="first occurrence" code="LFWF"/>
            <enumerator name="last occurrence" code="LFWL"/>
            <enumerator name="all occurrences" code="LFWA"/>
        </enumeration>
    
        
        <command name="filter list" code="Lst:Filt" description="check each item in the given list, returning a new list containing only those items that pass the test">
            <direct-parameter type="list"/>
            <parameter name="using" code="Usin" type="script"/>
            <result type="list"/>
            <documentation>
                <html><![CDATA[
<p>The <code>using</code> parameter's script object must implement a handler named <code>filterItem</code> that takes a value as its input and returns <code>true</code> or <code>false</code> indicating whether or not the item should appear in the output list.</p>

<pre><code>script Over18
  to filterItem(aValue)
    return aValue > 18
  end filterItem
end script

filter list {12, 42, 16, 21} using Over18 → {42, 21}</code></pre>

<p>Note that AppleScript specifiers can also be used to filter lists by item type, for example:</p>

<pre><code>every number of {true, -1, 2.5, "42", {99}, 1.0E+6} → {-1, 2.5, 1.0E+6}</code></pre>

                ]]></html>
            </documentation>
        </command>
        
    </suite>
    
    
    
    <suite name="Sort" code="****">
        
        <command name="sort list" code="Lst:Sort" description="sort a list of comparable items">
            <direct-parameter type="list" description="the items to sort; if items cannot be directly compared against each other (e.g. if the list contains a mixture of text and numbers, or is a list of lists/records/scripts), the appropriate ‘using’ parameter must also be given"/>
            <parameter name="using" code="Comp" type="script" optional="yes" description="a ‘comparator’ script object that implements ‘makeKey’ and ‘compareKeys’ handlers, used to compare list items (default: default comparator)"/>
            <result type="list"/>
            <documentation>
                <html><![CDATA[
<pre><code>sort list {2, 7, 4, 1} → {1, 2, 4, 7}</code></pre>
                ]]></html>
            </documentation>
        </command>
        
        <command name="unsort list" code="Lst:LiUS" description="randomly rearrange the items in a list, returning a new list as result">
            <direct-parameter type="list"/>
            <result type="list"/>
        </command>
        
    
        <command name="default comparator" code="Lst:DeSo" description="returns a ‘DefaultComparator’ object, suitable for use in ‘sort list’s ‘using’ parameter when sorting a list containing only numbers OR text OR dates">
            <result type="script"/>
        </command>
    
        <command name="date comparator" code="Lst:DaSo" description="returns a ‘DateComparator’ object, suitable for use in ‘sort list’s ‘using’ parameter when sorting a list of date items">
            <result type="script"/>
        </command>
    
        <command name="number comparator" code="Lst:NuSo" description="returns a ‘NumberComparator’ object, suitable for use in ‘sort list’s ‘using’ parameter when sorting a list of numbers (integers and/or reals) or values that can be coerced to numbers">
            <result type="script"/>
        </command>
    
        <command name="text comparator" code="Lst:TeSo" description="returns a ‘TextComparator’ object, suitable for use in ‘sort list’s ‘using’ parameter when sorting a list of text items, or values that can be coerced to text">
            <parameter name="for" code="Cons" type="SrtE" optional="yes" description="(default: case insensitivity)"/>
            <result type="script"/>
            <documentation>
                <html><![CDATA[
<p>This command returns an object that controls how the ‘sort list’ command sorts a list of text values. This object performs two operations when ‘sort list’ is called:</p>
<ol>
<li>It coerces each item in the list to <code>text</code>. If any item cannot be coerced to text, the `sort list` command will report a coercion error (-1700). This value is only used to determine sorting order; it will not appear in the final list.</li>
<li>It compares a pair of text keys to determine which item should come first, and rearranges the items in the original list as needed.</li>
</ol>

<p>This command can customize text comparators as follows:</p>
<ul>
<li><code>exact match</code> – Case, diacriticals, hyphens, punctuation, and white space are all considered, while <code>numeric strings</code> are ignored. (Considering numeric strings treats e.g. <code>"7"</code> and <code>"007"</code> as equal; ignoring numeric strings matches them character for character.)</li>
<li><code>case sensitivity</code> – Only diacriticals are ignored, while all other settings, including <code>case</code> and <code>numeric strings</code> are considered. (Be aware that AppleScript orders characters according to Unicode, not ASCII, rules, so "a" comes before "A", and "A" comes before "b", and so on.)</li>
<li><code>case insensitivity</code> – Case and diacriticals are ignored, while all other settings, including <code>numeric strings</code> are considered.</li>
<li><code>current considerations</code> – Text is sorted using whatever considering/ignoring settings are currently applied when <code>sort list</code> is called. (By default, AppleScript ignores case and numeric strings, and considers diacriticals, hyphens, punctuation, and white space. To alter these settings – or to guarantee predictable sorting at all times – wrap your <code>sort list</code> command in the appropriate <code>considering</code> and/or <code>ignoring</code> block.)</li>
</ul>

<p>For example:</p>

<pre><code>sort list {"foo", "Foo", "bar"} using (text comparator for case sensitivity)</code></pre>

                ]]></html>
            </documentation>

        </command>
        
        
        <enumeration name="SrtE" code="SrtE">
            <!-- caution: Text library defines the same enums for use in its `search text` command, so names and codes must match exactly to avoid terminology conflicts -->
			<enumerator name="exact match" code="CmpE"/> <!-- consider everything except numeric strings -->
			<enumerator name="case sensitivity" code="CmpC"/> <!-- consider everything, including case and numeric strings -->
			<enumerator name="case insensitivity" code="CmpI"/> <!-- ignore case and consider everything else, including numeric strings -->
			<enumerator name="current considerations" code="CmpD"/> <!-- use whatever considering/ignoring settings are in effect when `search text`/`sort list` is called -->
        </enumeration>
        
            
        <command name="list comparator" code="Lst:LiSo" description="returns a ‘ListComparator’ object, suitable for use in ‘sort list’s ‘using’ parameter when sorting a list of lists">
            <parameter name="for" code="Comp" optional="yes" description="a single comparator for comparing all items of an arbitrary-length list, or a list of ‘item comparator’ records for comparing specific items in each list (default: default comparator)">
                <type type="script"/>
                <type type="item comparator" list="yes"/>
            </parameter>
            <result type="script"/>
            <documentation>
                <html><![CDATA[
<p>For example, to sort a list of lists of uniform type, in this case numbers:</p>

<pre><code>sort list {{3}, {1, 1, 5}, {}, {2, 1}, {2}, {1, 3}, {1, 2}} ¬
    using (list comparator for number comparator)
→ {{}, {1, 1, 5}, {1, 2}, {1, 3}, {2}, {2, 1}, {3}}</code></pre>
  
<p>It is also possible to sort a list of lists of mixed types by specifying exactly which items to sort on and how each one should be compared. For example, consider the following list where each sublist is of form <code>{<var>name</var>, <var>female</var>, <var>age</var>}</code>:</p>

<pre><code>set myList to { ¬
    {"Bob", false, 33}, ¬
    {"Jane", true, 25}, ¬
    {"Andi", true, 33}}</code></pre>
        
To sort this first by comparing item 3 of each sublist numerically, then by comparing item 1 of each sublist as text:</p>

<pre><code>sort list myList using (list comparator for { ¬
    {itemIndex:3, itemComparator: number comparator}, ¬
    {itemIndex:1, itemComparator: text comparator}})</code></pre>        

<p>The resulting list of lists is ordered first by ages then by names:</p>

<pre><code>→ {{"Jane", true, 25}, {"Andi", true, 33}, {"Bob", false, 33}}</code></pre>

<p>[TO DO: describe how to extend list comparator to sort a list of records:]</p>

<pre><code>script PersonRecordComparator
    
  property parent : list comparator for { ¬
      {itemIndex:3, itemComparator:number comparator}, ¬
      {itemIndex:1, itemComparator:text comparator}}
    
  to makeKey(aRecord)
    set keyList to {name, female, age} of aRecord
    return continue makeKey(keyList)
  end makeKey
    
end script


set myList to { ¬
    {name:"Bob", female:false, age:33}, ¬
    {name:"Jane", female:true, age:25}, ¬
    {name:"Andi", female:true, age:33}}

sort list myList using PersonRecordComparator

→ {{name:"Jane", female:true, age:25}, 
    {name:"Andi", female:true, age:33}, 
    {name:"Bob", female:false, age:33}}</code></pre>

                ]]></html>
            </documentation>
        </command>
        
        
        <record-type name="item comparator" code="LstC" description="used by ‘list comparator’ to sort a list of sublists on a particular sublist item">
            <documentation>
                <html><![CDATA[
<pre><code>{ itemIndex : <var>integer</var>,
  itemComparator: <var>script</var> }</code></pre>
                ]]></html>
            </documentation>
        </record-type>
    	
    	
        <command name="reverse comparator" code="Lst:ReSo" description="returns a ‘ReverseComparator’ object, suitable for use in ‘sort list’s ‘using’ parameter when sorting items in descending order">
			<parameter name="for" code="Comp" type="script" optional="yes" description="the comparator object whose sorting order should be reversed (default: default comparator)"/>
            <result type="script"/>
        </command>
        
    </suite>
    
    
</dictionary>