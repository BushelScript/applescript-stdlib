<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd">
<dictionary title="">
	
	<!-- note: this SDEF uses four-char codes containing "high-ASCII" chars (i.e. bytes in range 128-255 represented as characters originally found in MacOSRoman charset) to reduce the likelihood of keyword collisions with the code being tested; TO DO: check how these raw codes appear in AS when host system uses different primary encodings -->
	
	
	
	<suite name="Assertions" code="****" description="commands used to compare expected vs actual results">
	
		<!-- TO DO: slight problem using `is` as parameter name is that AS parses it differently depending on whether or not the command's parameters appear in the same order as below; if not, the `is` will be parsed as an operator instead of parameter name -->
				
		<command name="assert test result" code="Ü†ë:AsRe" description="checks and reports that test code produces the correct output for valid input">
			<parameter name="for" code="Valu" type="any" description="the actual result returned by the code being tested"/>
			<parameter name="is" code="Equa" type="any" optional="yes" description="the expected result"/>
			<parameter name="using" code="Usin" type="script" optional="yes" description="the type of check to perform (default: exact equality check)"/>
			<parameter name="note" code="Summ" type="text" optional="yes" description="any additional information to include in the test result"/>
			<documentation>
				<html><![CDATA[
<p>For example:</p>

<pre><code>to test_uppercaseText
  assert test result for (uppercase text "foøbår") is "FOØBÅR"
end test_uppercaseText</code></pre>

<p>If the <code>note</code> parameter is given, its text is included in the generate test report. For example, an <code>assert test result</code> command could use this parameter to describe the type of bugs that particular test is designed to detect.</p>
				]]></html>
			</documentation>

		</command>
	
		<command name="assert test error" code="Ü†ë:AsEr" description="checks and reports that test code throws the correct error for invalid input">
			<parameter name="in" code="Hand" type="text" optional="yes" description="the ‘call_NAME’ handler to use; if omitted, a handler with the same NAME as the current ‘test_NAME’ handler is called"/>
			<parameter name="for" type="any" code="Args" optional="yes" description="if given, the parameter to pass to the ‘call_NAME’ handler; if omitted, no parameters are passed"/>
			<parameter name="is" code="Equa" type="expected error information" description="the expected error"/>
			<parameter name="using" code="Usin" type="script" optional="yes" description="the type of check to perform (default: exact error check)"/>
			<parameter name="note" code="Summ" type="text" optional="yes" description="any additional information to include in the test result"/>
			<documentation>
				<html><![CDATA[
<p>For example:</p>

<pre><code>to test_uppercaseText
  assert test error for {a:"foo"} is {errorNumber:-1703} ¬
      note "Check unsuitable value types are rejected."
end test_uppercaseText

to call_uppercaseText(usingParam)
  uppercase text usingParam
end call_uppercaseText
</code></pre>
				]]></html>
			</documentation>
		</command>
		
		
		<record-type name="expected error information" code="Ü†ëE" description="record type used by the ‘assert…’ command to describe the expected error information"> <!-- note: this user-supplied record is distinct to the error info records TestLib uses internally for reporting failed tests; while both use the same identifier-based keys, internal error info records have their own `class` property and «class Ü†ëé» type which TestReport checks when determining how to convert test data to report text -->
			<documentation>
				<html><![CDATA[
<pre><code>{ errorNumber : <var>integer</var>,
  errorMessage : <var>text</var>,
  fromValue : <var>any</var>,
  toType : <var>type</var>,
  partialResult : <var>any</var> }</code></pre>

<p>The <var>errorNumber</var> property is required; other properties are recommended where appropriate.</p>
				]]></html>
			</documentation>
		</record-type>
		
		
	
		<command name="assert test passed" code="Ü†ë:AsPa" description="report a passed assertion">
			<parameter name="for" code="Valu" type="any" optional="yes" description="the actual result"/>
			<parameter name="note" code="Summ" type="text" optional="yes" description="any additional information to include in the test result"/>
			<documentation>
				<html><![CDATA[
<p>While <code>assert test result</code> is the preferred choice for checking whether or not a result value is correct, <code>assert test passed</code> and <code>assert test failed</code> may occasionally be used in situations that require complex checking logic beyond the capabilities of a standard ‘check’ object.</p>
				]]></html>
			</documentation>
		</command>
	
		<command name="assert test failed" code="Ü†ë:AsFa" description="report a failed assertion and abort the current test">
			<parameter name="for" code="Valu" type="any" optional="yes" description="the actual result"/>
			<parameter name="note" code="Summ" type="text" optional="yes" description="any additional information to include in the test result"/>
		</command>
		
		
	</suite>
	
	
	<suite name="Comparing Results" code="****" description="objects used to compare expected vs actual results">
	
	
		<command name="exact equality check" code="Ü†ë:ExEq" description="used in ‘assert test result’ to check that the expected and actual results are identical in both class and content">
			<result type="script"/>
		</command>
	
		<command name="numeric equality check" code="Ü†ë:NmEq" description="used in ‘assert test result’ to check that the expected and actual results are the same number, ignoring any slight differences (±1.0e-9) caused by the limited precision of real numbers">
			<parameter name="matching types" code="ETyp" type="boolean" optional="yes" description="if true, test will automatically fail if expected and actual numbers aren’t the same type; if false, test will pass as long as both numbers are numerically equal (default: true)"/>
			<result type="script"/>
			<documentation>
				<html><![CDATA[
<p>For example, the following assertion would normally fail due to the calculation <code>0.7 * 0.7</code> returning a real (a.k.a. floating point) number that is very nearly but not <em>precisely</em> 0.49:</p>

<pre><code>assert test result for (0.7 * 0.7) is 0.49 -- fails even though it shouldn’t</code></pre>

<p>To allow for the inherent imprecision of real numbers, pass a <code>NumericEqualityCheck</code> object as the <code>assert test result</code> command’s <code>using</code> parameter:</p>

<pre><code>assert test result for (0.7 * 0.7) is 0.49 using (numeric equality check) -- passes</code></pre>
				]]></html>
			</documentation>
		</command>
	

		<command name="numeric range check" code="Ü†ë:NmRg" description="used in ‘assert test result’ to check that the actual result is within the expected numeric range">
			<parameter name="matching types" code="ETyp" type="boolean" optional="yes" description="if true, test will automatically fail if expected and actual numbers aren’t the same type; if false, test will pass as long as the number is in range (default: true)"/>
			<result type="script"/>
			<documentation>
				<html><![CDATA[
<p>The <code>assert test result</code> command’s <code>is</code> parameter should be a two-number list of form <code>{<var>MIN</var>, <var>MAX</var>}</code>. For example:</p>

<pre><code>assert test result for <var>aResult</code> is {0.49, 0.51} -- result must be 0.5±0.01</code></pre>
				]]></html>
			</documentation>
		</command>
		
	
		<command name="multiple choice check" code="Ü†ë:ExMu" description="used in ‘assert test result’/‘assert test error’ to check that the actual result matches one of the items a list of expected values">
			<parameter name="using" code="Usin" type="script" optional="yes" description="the result/error check object that should be used to compare the actual result against each of the expected items in turn (default: exact equality check)"/>
			<result type="script"/>
		</command>
		
		
		<command name="exact error check" code="Ü†ë:ExEr" description="used in ‘assert test error’ to check that the actual error that occurs exactly matches the expected error information">
					<parameter name="using" code="Usin" type="record" optional="yes" description="a record of zero or more objects for checking specific error attributes (default: expected error attributes are checked for exact equality with actual error)"/>
			<result type="script"/>
			<documentation>
				<html><![CDATA[
<p>By default, each error property specified in the <code>assert test error</code> command’s <code>is</code> property is checked for exact equality with the corresponding property in the actual error. Occasionally, it may be necessary to customize the way in which a particular error property is compared, in which case the an alternate check object may be specfied to check that property.</p>

<p>To illustrate, the following <code>assert test error</code> command makes two checks: 1. that the error number is exactly 3000, and 2. that the error value is 0.49 allowing for any slight differences due to real numbers’ limited precision:</p>

<pre><code>assert test error is {errorNumber:3000 fromValue:0.49} ¬
        using {fromValue:numeric equality check}</code></pre>

<p>Thus, if the error value was produced by the calculation <code>0.7 * 0.7</code> – which returns a real number that is very nearly but not <em>precisely</em> 0.49 – this test will pass as expected.</p>
				]]></html>
			</documentation>
		</command>
	
	</suite>


	
	<suite name="Running Test Scripts" code="****" description="commands used to interact with ‘osatest’ runner">
		
		<command name="unit test runner" code="Ü†ë:TRPa" description="returns the location of the unit test runner (a command line executable embedded in the TestTools library)">
			<result type="file"/>
		</command>
		
		<command name="run unit tests" code="Ü†ë:RunT" description="run the unit tests in the specified script file">
			<direct-parameter type="file"/>
			<result type="text" description="the test report"/>
			<documentation>
				<html><![CDATA[
<p>To run a unit test script directly in Script Editor, include the following handler in the script:</p>

<pre><code>on run
  run unit tests (path to me)
end run</code></pre>

				]]></html>
			</documentation>

		</command>
		
	</suite>
		
</dictionary>

